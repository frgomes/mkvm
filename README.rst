mkvm
====

Makes virtual machines as you would expect.


Status
------
Under development. I have code scattered somewhere else which still needs to be integrated. Then it will be possible to spin up virtual machines on KVM/libvirt. Stay tuned!


Motivation
----------

There are several tools for configuration management around, but seems like I'm frustrated with all of them, for one reason or another. I don't remember exactly how many times I've used Vagrant, Terraform and other tools just to regret later, out of anguish and frustration, feeling like I should had done something better with my time and effort. Then I've started to write my own scripts, putting requirements and other ideas together. Ultimately, I've landed these experiments here.

*Independence*: I would like to deploy my own infrastructure of IT with ease, wherever I find convenient. I would like to deploy onto popular cloud providers, but I would like to deploy with ease on my own infrastructure as well, which is already paid, by the way.

*Simplicity*: I would like to keep configuration simple, being easy to modify and maintain. I'm not interested on clunky programming languages like HCL, which gets in the way between my intentions and the infrastructure I'm willing to deploy.

*Maintainability*: I would like to employ existing tools like Ansible and Terraform among others, but in a way which keeps the overall solution small and simple. It should be easy for contributors to implement new functionality without getting mad writing an entire stack of complex logic. Preferably, it should be a matter of writing templates for a given purpose.

*Flexibility*: Should I use an imperative language or a declarative language? Why not both? Should I invent a new programming language which is imperative but also declarative? I would like to take advantage of existing great ideas around, composing them in a mix which delivers value and productivity.

*Privacy and security*: Sensitive data should never be sitting in the source control. The best way of protecting your data is never making the data public in the first place, not even an encoded or hashed incarnatin of it. Bring your storage or your pendrive, mount it onto the system, then your sensitive data can be used under your full control and explicit consent.


Features
--------

The central component of the solution is a command line tool which generates configuration files from YAML files, and then kicks off Ansible scripts which are then responsible for provisioning and configuration, given the configuration files generated by this tool.

* Provisioning is available for `libvirt <https://libvirt.org/>`_. Other providers can be integrated in future.

* Minimalist provisioning is done via `Ansible <https://www.ansible.com>`_, which then coordinates the actual provisioning via `Terraform <https://www.terraform.io/>`_ and `cloudinit <https://cloudinit.readthedocs.io/en/latest/>`_.

* Updates DNS records onto `Cloudflare <https://1.1.1.1/>`_. Other providers can be integrated in future.

* Supports `Handlebars <https://docs.rs/crate/handlebars/latest>`_ template engine. Other template engines such as `MiniJinja <https://github.com/mitsuhiko/minijinja>`_ or `Golang templates <https://docs.rs/crate/gtmpl/latest>`_ can be integrated in future.


Getting Started
---------------

Not very much to be seen at this point, really.

Rust needs to be installed for development purposes:

.. code-block:: sh

    $ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

Now you can download the source code and run it:

.. code-block:: sh

    #!/bin/bash
    git http://github.com/frgomes/mkvm
    cd mkvm
    cargo run -- vm webtoolz -- examples/simple/*.yaml

License
-------

We firmly believe in the open source development model, and all our products are open source. However, in order to avoid abuse by agents willing to take advantage of the open source community but not willing to contribute back to the open source community, neither in the form of code nor in the form of financial support to developers committed to the tenets of the open source model, we then decided to adopt a dual licensing model from day one, from the very first commit of this repository.  This dual licensing model is carefully designed to protect all contributors against agents not really committed to open source tenets.

* `Server Side Public License <https://mathminds.io/server-side-public-license>`_ (SSPL): SSPL is a controversial licensing model, considered by many as "not a trully open source licensing", generating much `confusion <https://writing.kemitchell.com/2021/01/20/Righteous-Expedient-Wrong.html>`_, tension and accusations. SSPL can be considered a kind of `AGPLv3 on steroids <https://www.mongodb.com/licensing/server-side-public-license/faq>`_. A good summary of the controvery can be found `here <https://www.datanami.com/2021/01/25/momentum-builds-to-break-elasticsearch-licensing-deadlock/>`_, which probably backs our decision to adopt SSPL from the day one, guaranteeing that all participants are fully aware about their responsibilities and expected commitment and support to open source from day one, and not from a certain date in future when it becomes convenient, or maybe inconvenient.

* Proprietary license: As inventors and first guardians of this repository, `Mathminds Ltd <https://mathminds.io>`_ licenses this software to customers who, for one reason or another, are not interested on contributing to the open source software community. This way, Mathminds can channel the funds coming from licenses onto benefits to the open source community, on favour of contributors willing to spend precious time and valuable effort on fixing bugs, implementing new functionalities or performing other activities aiming to foster the open source community as a whole.

Conclusion
++++++++++

In one sentence: If you agree with GPLv3, you have to agree with SSPL since it is GPLv3 crafted in a way to avoid loopholes explored by cloud providers who are interested to collect benefits from the open source community whilst, at the same time, employ nocive practices which ultimately kill the open source initiative which originated the software object of this discussion.

We firmly believe that the vast majority of users will simply use the contents of this repository without making any changes and without offering any commercial product backed by the contents of this repository. These users, the vast majority, simply don't care and don't need to care about licensing at all.

A small parcel of users, something in the order of dozens or maybe a few hundreds, will decide to contribute to the open source community and probably will feel protected by the stringent SSPL, a form of AGPLv3 on steroids, which is ultimately crafted to guarantee appreciation for the efforts of the open source community.

A few participants, probably less than a dozen, will prefer a proprietary license, which reserve clients their rights to modify and use the software in a SaaS setting in any form they wish and, at the same time, fosters improvements in the open source software, performed by contributors fully committed to open source tenets.
